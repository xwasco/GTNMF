** This software package is developed for the following paper:
       Da Kuang, Chris Ding, Haesun Park,
       Symmetric Nonnegative Matrix Factorization for Graph Clustering,
       The 12th SIAM International Conference on Data Mining (SDM '12), pp. 106--117.
   Please cite this paper if you find this software useful.

** Symmetric NMF (SymNMF) is defined as:
       min_H f(H) = ||A - HH'||_F^2 subject to H >= 0
   where the input A is a n*n symmetric matrix containing pairwise similarity values,
   and the output H is a n*k nonnegative matrix indicating clustering assignment.
   SymNMF can be used as a framework for graph clustering. It uses the same similarity
   matrix A as in spectral clustering, but imposes different constraint on H.

** All these Matlab functions are documented.
   To get started, run the script test.m
   Please find the helper texts at the beginning of each M-file for more options.

** A summary of the functions in this software is listed below:

   User functions:
   symnmf_newton.m     - Newton-like algorithm for SymNMF, accepting a similarity matrix as input
   symnmf_anls.m       - ANLS algorithm for SymNMF, accepting a similarity matrix as input
   symnmf_cluster.m    - A wrapper for graph clustering, accepting a data matrix as input

   Auxiliary functions:
   scale_dist3.m       - Computes the affinity matrix of a dense graph with Gaussian similarity
   scale_dist3_knn.m   - Computes the affinity matrix of a sparse graph with Gaussian similarity
   inner_product_knn.m - Computes the affinity matrix of a sparse graph with inner product similarity
   dist2.m             - Computes a matrix of squared Euclidean distance values
   nnlsm_blockpivot.m  - The block pivoting algorithm for nonnegative least squares (courtesy of Jingu Kim)
   graph.data          - A simple graph clustering example
   test.m              - A test script running on the graph.data example

** Basic usage:
   To run SymNMF on a similarity matrix:                  H = symnmf_newton(A, k)
                                     or:                  H = symnmf_anls(A, k)
   To run SymNMF on a data matrix for graph clustering: idx = symnmf_cluster(X, k)
   Please refer to the documentation for more options.

** Which algorithm to choose:

   If the similarity matrix is dense (i.e. N is not extremely large and an
   N*N dense matrix can be stored into memory), then we recommend 'symnmf_newton'.

   If the similarity matrix is sparse (especially when an N*N dense matrix cannot
   be stored into memory), then we recommend 'symnmf_anls'. (the default in 'symnmf_cluster')

   'symnmf_newton' will generate more accurate solutions, whereas
   'symnmf_anls' is generally faster and applicable to larger problems.
   Please find more options for further acceleration in the helper text of 'symnmf_anls'.

   In each of the functions 'symnmf_cluster', 'symnmf_newton', and 'symnmf_anls',
   there is an user option 'computeobj' to specify whether to compute the objective
   function value at the final solution.
   It is turned ON by default in 'symnmf_newton' (because that's part of the algorithm),
   and turned OFF by default in 'symnmf_anls' and 'symnmf_cluster' (in order to avoid out-of-memory problem).
   It is required to be turned ON if one would like to obtain the best solution among multiple runs.

** NOTE:

   The documentation (as well as the cited paper) differentiates the term
   'affinity matrix' and the term 'similarity matrix'.

   An affinity matrix contains the raw edge weights in a graph, whereas
   a similarity matrix is formed based on the affinity matrix and is
   directly fed into symnmf_newton.

   For example, 'scale_dist3', 'scale_dist3_knn', 'inner_product_knn'
   routines all compute the affinity matrix; the similarity matrix in
   normalized cut is a normalized version of the affinity matrix.
